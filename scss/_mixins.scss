@use 'sass:map';
@use 'sass:list';
@use 'variables';

// Table cell sizing

@mixin cell($font-size, $gap: variables.$margin) {
  font-size: #{$font-size}em;
  padding: $gap / 2 / $font-size;
}

// Headings gap and font sizing

@mixin heading($font-size, $gap: variables.$margin, $with-border: false, $top-space: false) {
  font-size: #{$font-size}em;
  margin-bottom: $gap / $font-size;

  @if $top-space {
    margin-top: $gap * 3 / $font-size;
  } @else {
    margin-top: $gap / $font-size;
  }

  @if variables.$heading-borders and $with-border {
    border-bottom: 1px solid variables.$border-color;
    padding-bottom: $gap / $font-size;
  }
}

// Declare a font family

@mixin font-family($default-family, $variable-family) {
  font-family: $default-family;

  @if variables.$variable-fonts and $variable-family {
    @supports (font-variation-settings: normal) {
      font-family: $variable-family;
    }
  }
}

// Default font families

$font-families: (
  'base': variables.$family-base variables.$family-base-variable,
  'code': variables.$family-code variables.$family-code-variable
) !default;

// Convenience mixin to set default font families

@mixin font($key) {
  @if $key == 'base' or $key == 'code' {
    $family: map.get($font-families, $key);
    @include font-family(list.nth($family, 1), list.nth($family, 2));
  } @else {
    @error "Couldn't find a matching font family.";
  }
}

// Switch selector context

@mixin context($selector) {
  @if $selector == 'body' {
    @at-root {
      @content;
    }
  } @else {
    @content;
  }
}
